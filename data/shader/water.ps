
/* medea.js - Open Source, High-Performance 3D Engine based on WebGL.
 *
 * (c) 2011-2013, Alexander C. Gessler
 *  https://github.com/acgessler/medea.js
 *
 * Made available under the terms and conditions of a 3-clause BSD license.
 *
 */
 
uniform vec3 LIGHT_D0_DIR;

uniform sampler2D texture;
uniform sampler2D heightmap;
uniform vec4 spec_color_shininess;

#include <remote:mcore/shaders/core.psh>
#include <remote:mcore/shaders/lighting.psh>

const float kHEIGHT_WATER_LEVEL = (31.0 / 0.7) / 255.0;

// currently all lighting computation happens in worldspace
void main()
{
	// Water normal is always facing upwards ...
	vec3 N = vec3(0.0, 1.0, 0.0);

	float height_underwater = kHEIGHT_WATER_LEVEL - texture2D(heightmap, FetchTexCoord()).r;

	// diffuse contribution
	float diffuse = ComputeLambertDiffuseCoeff(LIGHT_D0_DIR, N);

	// Specular contribution (blinn)
	vec3 tex = texture2D(texture, FetchTexCoord()).rgb;
	tex *= tex; // Gamma
	float specular = ComputeBlinnSpecularCoeff(
		FetchVec3(eye),
		N,
		LIGHT_D0_DIR,
		spec_color_shininess.a
	);

	diffuse *= clamp(0.0, 1.0, height_underwater * 5.0) * 0.8;

	vec3 eye = FetchVec3(eye);
	eye.y = 0.0;
	float distance = clamp((dot(eye, eye) - 500000.0) / 2000000.0, 0.0, 1.0);

	vec3 fog_color = vec3(0.4,0.55,0.85);
	vec3 color = tex * diffuse + spec_color_shininess.rgb * specular;

	// Assemble, Fog, Gamma
    gl_FragColor.a = 0.65;
	gl_FragColor.rgb = sqrt(mix(color, fog_color, clamp(distance, 0.0, 1.0)));
}

