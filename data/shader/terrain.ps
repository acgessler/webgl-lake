#extension GL_OES_standard_derivatives : require

//#define TERRAIN_SPECULAR
//#define GAMMA

/* medea.js - Open Source, High-Performance 3D Engine based on WebGL.
 *
 * (c) 2011-2013, Alexander C. Gessler
 *  https://github.com/acgessler/medea.js
 *
 * Made available under the terms and conditions of a 3-clause BSD license.
 *
 */

#include <remote:mcore/shaders/core.psh>
#include <remote:mcore/shaders/lighting.psh>

#include <url:data/shader/constants_shared.vsh>

uniform sampler2D coarse_normal_texture;
uniform sampler2D fine_normal_texture;

uniform sampler2D ground_texture;
uniform sampler2D ground_normal_texture;

uniform sampler2D stone_texture;
uniform sampler2D stone_normal_texture;

uniform sampler2D grass_texture;
uniform sampler2D snow_texture;

uniform sampler2D desert_texture;

#ifdef TERRAIN_SPECULAR
uniform vec4 spec_color_shininess;
#endif

uniform sampler2D treemap;

uniform vec4 terrain_uv_offset_scale;
uniform float inv_terrain_map_dim;
uniform float uv_scale;

const float kDETAIL_NORMAL_STRENGTH = 2.0;
const float kFINE_NORMAL_STRENGTH = 2.0;
const float kCOARSE_NORMAL_STRENGTH = 4.0;

#ifdef DESERT
const float kDETAIL_NORMAL_SCALE = 1.0;
const float kFINE_NORMAL_SCALE = 0.045;
const float kCOARSE_NORMAL_SCALE = 0.1;
#else
const float kDETAIL_NORMAL_SCALE = 1.0;
const float kFINE_NORMAL_SCALE = 0.06;
const float kCOARSE_NORMAL_SCALE = 0.05;
#endif

const float kSPECULAR_STRENGTH = 0.05;

const float kTEXTURE_DISTANCE_SCALE = kTILE_SIZE * 15.0;
const float kTEXTURE_SQ_DISTANCE_SCALE = kTEXTURE_DISTANCE_SCALE * kTEXTURE_DISTANCE_SCALE;
const float kINV_TEXTURE_SQ_DISTANCE_SCALE = 1.0 / kTEXTURE_SQ_DISTANCE_SCALE;

vec3 SwizzleColorToNormal(vec2 c, float yscale) {
	return normalize(vec3(c.r, yscale, c.g) - vec3(0.5, 0.0, 0.5));
}

vec3 GetDetailNormal(vec2 uv, float distance_blend, float base_rock_blend) {
	vec3 nor_base = mix(
			texture2D(ground_normal_texture, uv).rgb,
			texture2D(ground_normal_texture, uv * 0.5).rgb,
			distance_blend
	);
	vec3 nor_rock = texture2D(stone_normal_texture, uv * 4.0).rgb;
	vec3 blend = mix(nor_base, nor_rock, base_rock_blend);
	return SwizzleColorToNormal(blend.rg, kDETAIL_NORMAL_SCALE);
}

// Note: tangent and model space is 'approximately' the same for flat terrain tiles.
//
// For a single terrain, model space is world space plus a
// translation. For a spherical terrain composed of 6 faces,
// that get mapped onto an unit sphere, model to world space
// is a non-linear, non-invertible map so the vertex shader
// must forward a suitable tangent basis.

void main()
{
	vec3 model_light_dir_0 = normalize(FetchVec3(model_light_dir_0));
	vec2 uv = FetchTexCoord();
	
	// World-space eye vector
	vec3 eye = FetchVec4(eye_height).xyz;

	// Square of world-space eye distance
	float eye_sq_distance = dot(eye, eye);

	// Height of the current point in range [0, 1]
	float height = FetchVec4(eye_height).w;

	// Position on the whole terrain in [0, 1] x [0, 1].
	// This is the UV coordinate to sample from the terrain-sized
	// texture maps (coarse and final normal input, noise, AO),
	vec2 terrain_uv = inv_terrain_map_dim * (terrain_uv_offset_scale.xy +
		uv * terrain_uv_offset_scale.zw);

	//
	float sq_distance_scaled = eye_sq_distance * kINV_TEXTURE_SQ_DISTANCE_SCALE;
	float uv_resolution_blend = clamp(sq_distance_scaled, 0.0, 1.0);
	float normal_scale_blend = 2.0 - uv_resolution_blend;

	// Fetch coarse normals (rg), noise (b) and ambient occlusion
	// (a) from the RGBA coarse normal map
	//
	// Coarse normals contain height-lines.
	vec4 nor_noise_occ = texture2D(coarse_normal_texture, terrain_uv);
	vec3 coarse_normal = SwizzleColorToNormal(nor_noise_occ.rg,
		kCOARSE_NORMAL_SCALE * normal_scale_blend);

	// Fetch fine terrain normals (rg) from the RGBA fine normal map
	//
	// Fine normals contain (relatively) unsmoothed height deltas
	vec4 nor2_unused = texture2D(fine_normal_texture, terrain_uv);
	vec3 fine_normal = SwizzleColorToNormal(nor2_unused.rg,
		kFINE_NORMAL_SCALE * normal_scale_blend);

	// Scale source UV to adapt for higher LODs
	uv *= uv_scale;

	// Mix in the detail normal, which is a mix between base and rock.
	// Derive the blending between ground base and rock base from the
	// angle of the coarse normal only.
	float base_rock_blend = clamp(1.0 - coarse_normal.y * normal_scale_blend, 0.0, 1.0);
	vec3 detail_normal = GetDetailNormal(uv, uv_resolution_blend, base_rock_blend);

	// Assemble the final normal from coarse, fine and detail normal
	vec3 N = normalize(
		coarse_normal 	* kCOARSE_NORMAL_STRENGTH 	+
		fine_normal 	* kFINE_NORMAL_STRENGTH 	+
		detail_normal 	* kDETAIL_NORMAL_STRENGTH
	);

	float forestation = texture2D(treemap, terrain_uv).b;

	// Diffuse lighting: simple lambert against sun direction
	float diffuse = ComputeLambertDiffuseCoeff(model_light_dir_0, N);

	// Apply ambient occlusion
	diffuse = diffuse * clamp(nor_noise_occ.a, 0.5, 1.0);

#ifdef TERRAIN_SPECULAR
	// Specular contribution: simple blinn with self-shadowing
	float specular = ComputeBlinnSpecularCoeff(
		eye,
		N,
		LIGHT_D0_DIR,
		32.0
	) * kSPECULAR_STRENGTH;
	specular *= clamp(diffuse * 4.0, 0.0, 1.0);
#endif

	// Get the diffuse base color by blending the color textures for rock and base
	vec3 tex_base = texture2D(ground_texture, uv).rgb;
	vec3 tex_rock = texture2D(stone_texture, uv).rgb;
#ifdef GAMMA
	tex_base *= tex_base; // Gamma
	tex_rock *= tex_rock; // Gamma
#endif
	vec3 tex = mix(tex_base, tex_rock, base_rock_blend);

#ifdef DESERT
	float fade_desert = max(1.0 - length(terrain_uv - vec2(0.5, 0.5)) * 2.0, 0.0);

	// Shift general color towards red
	tex.rb *= 1.0 + (fade_desert * 0.3);

#endif // DESERT

	// Different code paths depending on whether this is a snow region
	// or not.
#ifndef DESERT
	if (height <= kSNOW_BEGIN) 
#endif // DESERT
	{
		// Sampling distance grass with 0.5 the resolution looks
		// as if the ground was populated by shrubs, which is
		// nice. It also aways the otherwise strongly repeating
		// patterns of green.
		vec3 tex_green = mix(
			texture2D(grass_texture, uv * 2.0).rgb,
			texture2D(grass_texture, uv).rgb,
			uv_resolution_blend);
#ifdef GAMMA
		tex_green *= tex_green; // Gamma
#endif

#ifdef DESERT
		vec3 tex_desert = texture2D(desert_texture, uv).rgb;
		tex_green = mix(tex_green, tex_desert, pow(fade_desert, 0.3));
#endif // DESERT
		

		vec2 x = vec2(base_rock_blend, nor_noise_occ.b);
		float d = clamp(dot(x, x), 0.0, 1.0);
		tex = mix(tex_green, tex, d * 2.0);
	}

#ifndef DESERT
	else {
		vec3 tex_snow = texture2D(snow_texture, uv).rgb * 2.0;
		//tex_snow *= tex_snow; // Gamma

		float snow_transition = (kALL_SNOW_HEIGHT - height) / (kALL_SNOW_HEIGHT - kSNOW_BEGIN);
		tex = mix(tex_snow, tex, clamp(snow_transition + base_rock_blend, -1.0, 1.0));
	}
#endif // DESERT

	// Forest areas are darker and greener
	float forest_attenuation = max(forestation, 0.5);
	tex.g += 0.25 * (1.0 - forest_attenuation);
	tex *= forest_attenuation;

	// Simple fog
	vec3 color = tex * diffuse
#ifdef TERRAIN_SPECULAR
	+ vec3(1.0, 1.0, 1.0) * specular;
#endif
	;
	//vec3 fog_color = vec3(0.4,0.55,0.85);
	//float eye_height = length(eye) / 600.0;
	//eye.y = 0.0;
	//float distance = (eye_sq_distance - 500000.0) / (2000000.0 * max(1.0, eye_height));

	// Assemble, Fog, Gamma
    gl_FragColor.a = 1.0;
	gl_FragColor.rgb = color; //mix(color, fog_color, 0.5 * clamp(distance, 0.0, 1.0));
#ifdef GAMMA
	gl_FragColor.rgb = sqrt(gl_FragColor.rgb);
#endif
}

