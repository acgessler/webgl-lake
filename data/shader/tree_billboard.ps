

/* medea.js - Open Source, High-Performance 3D Engine based on WebGL.
 *
 * (c) 2011-2013, Alexander C. Gessler
 *  https://github.com/acgessler/medea.js
 *
 * Made available under the terms and conditions of a 3-clause BSD license.
 *
 */

#include <remote:mcore/shaders/core.psh>
#include <remote:mcore/shaders/lighting.psh>

uniform sampler2D texture;
uniform vec3 LIGHT_D0_DIR;

void main()
{
  vec4 color = texture2D(texture, FetchTexCoord());
 

  vec3 nor = normalize(FetchVec3(normal));
  float diffuse = ComputeLambertDiffuseCoeff(LIGHT_D0_DIR, nor);

  vec3 eye = FetchVec3(eye);
  float distance = length(eye);
 
  //distance - kTREE_BILLBOARD_BEGIN;

  gl_FragColor.a = color.a;
  if (color.a < 0.6) {
    discard;
  }

  // Chrome pads transparent pixel with white, thus loosing
  // the original black which is relevant for sampling
  // though.
  gl_FragColor.rgb =  diffuse * color.rgb;
}

